---
# file: group_vars/all.yml

# Environment Variable Set
tag_env: prd
aws_profile: "{{ lookup('env', 'AWS_PROFILE') }}"

# EC2 Variable Set
placement_group:
  
# Set Network Params
vpc_id: vpc-c29a69ab
region: ap-northeast-2
subnet10: subnet-32e15a5b
subnet20: subnet-03bc0a6a
subnet30: subnet-ade15ac4
subnet90: subnet-3f3ce356
subnet110: subnet-e69d66ab
subnet120: subnet-9b04f2d6
subnet130: subnet-b99d66f4
subnet190: subnet-270a136d

# AD Auth Group
ldap_access_cn: deteam

# Set ELB
elbs: [] # Auto Scaling ELB LIST (default null)
ssl_certificate_id: arn:aws:acm:ap-northeast-2:301793495156:certificate/c92ca69a-478e-498a-9246-106bb541f6d8
access_logs:
elb_subnets:
  - "{{ subnet90 }}"
interal_elb_subnets:
  - "{{ subnet20 }}"

# Global External ELB Listeners, Health Check
ext_elb_listeners:
  - protocol: http
    load_balancer_port: 80
    instance_protocol: http
    instance_port: 2080
  - protocol: https
    load_balancer_port: 443
    instance_protocol: http
    instance_port: 2080
    ssl_certificate_id: "{{ ssl_certificate_id }}"

health_check_ext_elb: {
  ping_protocol: http,
  ping_port: 2080,
  ping_path: "/siteup.html",
  response_timeout: 5,
  interval: 10,
  unhealthy_threshold: 2,
  healthy_threshold: 2
}

# Global Internal ELB Listeners, Health Check
int_elb_listeners:
  - protocol: http
    load_balancer_port: 9000
    instance_protocol: http
    instance_port: 9000

health_check_int_elb: {
  ping_protocol: http,
  ping_port: 9000,
  ping_path: "/siteup.html",
  response_timeout: 5,
  interval: 10,
  unhealthy_threshold: 2,
  healthy_threshold: 2
}

# Set Auto Scaling Notificate Configure Default value
asg_sns_topic:
asg_notification_types: []

# Set Auto Scaling scheduled Configure Default value
scheduled: false

# Set SNS Topic
## Auto Recovery
auto_recovery_sns:
  name: auto-recovery
  subscriptions:
    - endpoint: aws-bi@sktechx.com
      protocol: email
      
# CloudWatch alarms metric
cw_alarm_metric:
  - metric: df.percent_bytes.used
    namespace: collectd
    statistic: Maximum
    threshold: 80
    period: 60
    evaluation_periods: 3
    sns_topic_arn: arn:aws:sns:ap-northeast-2:799460249948:cloudwatch-alarm
    dimensions: {
      Host: "{{ ansible_ec2_instance_id }}",
      PluginInstance: root
    }
  - metric: memory.percent.used
    namespace: collectd
    statistic: Average
    threshold: 80
    period: 60
    evaluation_periods: 3
    sns_topic_arn: arn:aws:sns:ap-northeast-2:799460249948:cloudwatch-alarm
    dimensions: {
      Host: "{{ ansible_ec2_instance_id }}",
      PluginInstance: NONE
    }
  - metric: CPUUtilization
    namespace: AWS/EC2
    statistic: Average
    threshold: 80
    period: 60
    evaluation_periods: 3
    sns_topic_arn: arn:aws:sns:ap-northeast-2:799460249948:cloudwatch-alarm
    dimensions: {
      InstanceId: "{{ ansible_ec2_instance_id }}"
    }
    
# Aws logs
awslogs: {
  target: [] # target : array, values = [ catalina, admin, api, batch, nodejs ], log target parameter
}

# Set Instance Params
image: ami-1839e976 
keypair: bi_dev
instance_role:
termination_protection: yes
volumeinfo:
  - device_name: /dev/sda1
    volume_size: 30
    device_type: gp2
    delete_on_termination: "true"
userdata: |
    #!/bin/sh
    sleep 10

    # set hosts file for tomcat
    IP=`curl -s http://169.254.169.254/latest/meta-data/local-ipv4`
    HOST=`hostname`
    echo -n $IP $HOST >> /etc/hosts

    # update packages to latest
    yum clean all
    yum -y update

    # create services account
    #adduser -r -m -d /services -s /sbin/nologin -c "Common Services Account" suser
    mkdir -p /skt/{web,was,batch}
    mkdir -p /skt/web/instance01
    mkdir -p /skt/was/apps/instance01/{conf,lib,logs,temp,webapps,work}
    chown nobody.adm /skt/was/apps/instance01/{logs,temp,work}
    chown root.nobody /skt/was/apps/instance01/{conf,lib}
    chown skt.nobody /skt/was/apps/instance01/webapps
    chmod 2775 -R /skt/was/apps/instance01

    # call home
    #curl http://10.10.10.100:5000/{{ tag_name }}?ip=$IP
    
